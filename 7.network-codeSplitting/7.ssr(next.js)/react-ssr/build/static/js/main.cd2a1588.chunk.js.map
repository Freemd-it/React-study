{"version":3,"sources":["redux/modules/users.js","lib/api.js","redux/modules/index.js","redux/configureStore.js","redux/store.js","component/List.js","App.js","serviceWorker.js","index.js"],"names":["getUsers","createAction","axios","get","handleActions","Object","objectSpread","pender","type","onSuccess","state","action","data","payload","combineReducers","users","penderReducer","composeEnhancers","compose","configureStore","initialState","createStore","modules","applyMiddleware","penderMiddleware","window","__PRELOADED_STATE__","List","_this$props","this","props","UsersActions","done","console","log","length","then","userList","map","user","react_default","a","createElement","key","id","name","Component","withDone","connect","dispatch","bindActionCreators","usersActions","App","className","component_List","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","es","store","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WASaA,EAAWC,YAHN,kBCJM,kBAAMC,IAAMC,IAAI,gDDczBC,cAAcC,OAAAC,EAAA,EAAAD,CAAA,GACtBE,iBAAO,CACNC,KAZU,kBAaVC,UAAW,SAACC,EAAOC,GACf,MAAO,CACHC,KAAMD,EAAOE,QAAQD,UAThB,CACjBA,KAAM,KETKE,cAAgB,CAC3BC,QACAR,OAAQS,kBCENC,EAA8FC,ICLrFC,EDOQ,SAACC,GAapB,OAZcC,YAAYC,EAASF,EAAcH,EAC7CM,YAAgBC,SCTTL,CAAeM,OAAOC,4ECG/BC,+LACiB,IAAAC,EACkBC,KAAKC,MAAlCC,EADWH,EACXG,aAAcnB,EADHgB,EACGhB,KAAMoB,EADTJ,EACSI,KAE5B,GADAC,QAAQC,IAAIF,GACO,IAAhBpB,EAAKuB,OAAc,OAAO,EAC7BJ,EAAa/B,WAAWoC,KAAKJ,EAAMA,oCAG5B,IAEDK,EADWR,KAAKC,MAAdlB,KACc0B,IACpB,SAAAC,GAAI,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKK,IAAKL,EAAKM,QAElC,OACEL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACKL,WAhBIS,aAyBJC,qBAASC,YACtB,SAACtC,GAAD,MAAY,CACRE,KAAMF,EAAMK,MAAMH,OAEtB,SAACqC,GAAD,MAAe,CACblB,aAAcmB,YAAmBC,EAAcF,KAL3BD,CAOtBrB,ICxBayB,mLARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACbb,EAAAC,EAAAC,cAACY,EAAD,cAJUR,aCQES,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACPpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUC,MAAOA,GACfvB,EAAAC,EAAAC,cAACsB,EAAD,QAGFC,SAASC,eAAe,SDgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.cd2a1588.chunk.js","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\nimport { pender } from 'redux-pender';\n\nimport * as api from 'lib/api';\n\n// 액션 타입\nconst GET_USERS = 'users/GET_USERS';\n\n// 액션 생성자\nexport const getUsers = createAction(GET_USERS, api.getUsers);\n\n// 초기 상태\nconst initialState = {\n    data: []\n};\n\nexport default handleActions({\n    ...pender({\n        type: GET_USERS, \n        onSuccess: (state, action) => {\n            return {\n                data: action.payload.data\n            }\n        }\n    })\n}, initialState);","import axios from 'axios';\n\nexport const getUsers = () => axios.get('https://jsonplaceholder.typicode.com/users');","import { combineReducers } from 'redux';\nimport users from './users';\nimport { penderReducer } from 'redux-pender';\n\nexport default combineReducers({\n    users,\n    pender: penderReducer\n});","import { createStore, applyMiddleware, compose } from 'redux'\nimport penderMiddleware from 'redux-pender';\n\nimport modules from './modules';\n\nconst isDevelopment = process.env.NODE_ENV === 'development'; // 환경이 개발모드인지 확인합니다\n\n// 개발모드에서만 리덕스 개발자도구 적용\nconst composeEnhancers = isDevelopment ? (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose) : compose;\n\nconst configureStore = (initialState) => {\n    const store = createStore(modules, initialState, composeEnhancers(\n        applyMiddleware(penderMiddleware())\n    ));\n\n    // hot-reloading 를 위한 코드\n    if(module.hot) {\n        module.hot.accept('./modules', () => {\n            const nextRootReducer = require('./modules').default;\n            store.replaceReducer(nextRootReducer);\n        });\n    }\n\n    return store;\n}\n\nexport default configureStore;","import configureStore from './configureStore';\n\n// 클라이언트에서만 사용됨\nexport default configureStore(window.__PRELOADED_STATE__);","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as usersActions from 'redux/modules/users';\nimport { withDone } from 'react-router-server'\n\nclass List extends Component {\n  componentWillMount() {\n    const { UsersActions, data, done } = this.props\n    console.log(done)\n    if(data.length !== 0) return false;\n    UsersActions.getUsers().then(done, done)\n  }\n\n  render() {\n    const { data } = this.props\n    const userList = data.map(\n      user => <li key={user.id}>{user.name}</li>\n    )\n    return (\n      <div>\n          <ul>\n              {userList}\n          </ul> \n      </div>\n    );\n  }\n}\n\n\n\nexport default withDone(connect(\n  (state) => ({\n      data: state.users.data\n  }),\n  (dispatch) => ({\n    UsersActions: bindActionCreators(usersActions, dispatch)\n  })\n)(List));","import React, { Component } from 'react';\nimport List from './component/List'\n// import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from 'redux/store'\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}